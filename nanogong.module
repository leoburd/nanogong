<?php
// $Id$

/*
 * Implementation of hook menu
 * defines the callback the listenUp module would use
 */

//session_start();

function nanogong_menu() {
  $items = array();
  $items['nanogong/file_upload'] = array(
    'title' => 'Nanogong File Upload',
    'description' => 'This menu handles file uploads for the nanogong module',
    'page callback' => 'nanogong_file_receive',
    'type' => MENU_CALLBACK,
	'access callback' => true,
   );

  return $items;
}


/**
 * Implementation of hook_theme().
 */
function nanogong_theme() {
  return array(
    'nanogong_listenUp' => array(
      'arguments' => array('element' => NULL),),
	
    'nanogong_formatter_listenup_player' => 
		array('arguments' => array('element' => NULL)),
    'nanogong_formatter_link_to_file' => 
		array('arguments' => array('element' => NULL)),	
  );
}

/**
* Declare information about a field type.
*
* @return
*   An array keyed by field type name. Each element of the array is an associative
*   array with these keys and values:
*   - "label": The human-readable label for the field type.
*/
function nanogong_field_info() {

  return array(
    'nanogong' => array('label' => 'File'),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function nanogong_field_settings($op, $field) {
  switch ($op) {
	case 'database columns':
		// value is audio file fid
		$columns['value'] = array(
			 'type' => 'int',
			 'length' => 12,
			 'sortable' => FALSE,
			 'not null' => FALSE);
		return $columns;
  }
}

/**
 * Implementation of hook_field().
 *
 */
function nanogong_field($op, &$node, $field, &$items, $teaser, $page) {
  
  switch ($op) {
	case 'presave':
		foreach($items as $key=>$value){
			if(!empty($value['value'])){
				$file = nanogong_get_file_object($value['value']);
	
				// since the applet, and the file receive scripts saved the
				// new recording for an anonymous user, we need to
				// update the real uploading user here.		
				if(file_set_status($file,1)){
					global $user;
					$file->uid = $user->uid;
					//update user columb in file table
					drupal_write_record('files', &$file, array('fid'));
				}
			}
		}
		break;
	case 'load':
			// load file data to field 
			$field_name = $field['field_name'];
			foreach($items as $key=>$value){
				$n[$field_name][$key]['value'] = $value['value'];
				$n[$field_name][$key]['file'] = nanogong_get_file_object($value['value']);
			}
			return $n;
			
		break;
  }
}

/**
 * Implementation of hook_content_is_empty().
 *
 *
 * This function tells the content module whether or not to consider
 * the $item to be empty. This is used by the content module
 * to remove empty, non-required values before saving them.
 */
function nanogong_content_is_empty($item, $field) {

  if (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}



/**
 * FAPI theme for an individual elements.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
*/ 
function theme_nanogong_listenUp($element) {
	return $element['#children'];
}

/*
 * retrives a file object from the db.
 */
function nanogong_get_file_object($fid){
	$sql = "SELECT * FROM {files} f WHERE f.fid='".$fid."'";
	$res = db_query($sql);
	return db_fetch_object($res);
}

/*
 * parse a "name|value" string to a string of applet parameters tags
 */
function nanogong_build_params($params){
	$params_arr = array();
	$params_str = "";
	if(preg_match_all('/[\w\d_]+\|[\w\d_]+/',$params,$params_arr)){

		foreach($params_arr[0] as $val){
			$pair = explode('|',$val);
			if(count($pair) ==2)
				$params_str.= '<param name="'.$pair[0].'" value="'.$pair[1].'">';
		}
	}
	
	return $params_str;
}
