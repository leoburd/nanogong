<?php
// $Id$

/**
 * @file
 * Implements a Java-based audio recorder field
 */

foreach (array('nanogong_field.inc', 'nanogong_formatter.inc', 'nanogong_widget.inc') as $file) {
  require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . $file);
}


/**
 * Implementation of hook_menu()
 */
function nanogong_menu() {
  $items = array();
  $items['nanogong/file_upload'] = array(
    'title' => 'Nanogong File Upload',
    'description' => 'This menu handles file uploads for the nanogong module',
    'page callback' => 'nanogong_file_receive',
    'type' => MENU_CALLBACK,
	'access callback' => true,
   );

  return $items;
}

/*
 * listenUp recorder applet callback. This is what happens when 
 * 'send' is pressed in the applet
 */
function nanogong_file_receive(){

    header("Cache-control: private");
    header("Content-Type: text/plain");	
	
	$field_id = $_GET['field_id'];
	
	//TODO save duration in field
	$duration = strip_tags($_POST['duration']);
	$tmp_name = $_FILES['userfile']['tmp_name'];
	$upload_dir = file_directory_path();

	$c = (file_check_directory($upload_dir,0))? 1:0;
	print("file folder writeable? $c");
		
	// TODO: get file extension from real file type
	$new_name = time().'.wav';
	$new_path = file_create_filename($new_name, $upload_dir);
	//$new_path = $upload_dir.$new_name;
	
watchdog('nanogong', 'new path: '.$new_path);

	if($_FILES['userfile']['error']>0){
		watchdog('nanogong',"ERROR - error code: ".$_FILES['userfile']['error']."\n");
		$fid = "NULL";
	}else{
			$_FILES['files'] = $_FILES['userfile'];
			
			$_FILES['files']['name'] = $new_name;
			$use = 'name';//session_id();
			
			watchdog('nanogong', '$user: '.$use);
			variable_set($use, $new_name);
			foreach($_FILES['files'] as $key=>$value){
				$_FILES['files'][$key] = array(0 => $value);
			}

			watchdog('nanogong', 'exporting files: '.print_r($_FILES, true));
			dsm($_FILES);

			 if(!$file = file_save_upload(0,array(),$upload_dir)){
				watchdog('nanogong',"ERROR - file_save_upload failed\n");
				$fid = "NULL";		
			} else{
				watchdog('nanogong', 'exporting file2: '.print_r($file, true));
				$fid = $file->fid;
				
				//convert uploaded wav files to mp3 - does'nt work yet
				/*
				$ffmpeg_format    = 'libmp3lame';
				$ffmpeg_extension = 'mp3';
				$ffmpeg_frequency = '44100';
				$ffmpeg_bitrate   = '64k';
				$ffmpeg_channels  = '2';
				$ffmpeg_mime      = 'audio/mpeg';
				$ffmpeg_path      = $field['widget']['ffmpeg_path'] ?
				$field['widget']['ffmpeg_path'] : '/usr/bin/ffmpeg';
						
				$ffmpeg_arguments = '-y -i ' . $file->filepath . ' ' .
				'-f ' . $ffmpeg_extension . ' ' .
				'-acodec ' . $ffmpeg_format . ' ' .
				'-ar ' . $ffmpeg_frequency . ' ' .
				'-ab ' . $ffmpeg_bitrate . ' ' .
				'-ac ' . $ffmpeg_channels . ' ' .
				$file->filepath.".mp3";
	
				var_export($ffmpeg_arguments);
				// Convert the file to one with the fresh file name.
				 $ffmpeg_results = shell_exec("ffmpeg" . " " . $ffmpeg_arguments);		
				
				*/		

				watchdog('nanogong', "SUCCESS - File have been uploaded,\n");
			}
	}
	watchdog('nanogong', 'works2');
	$js = "document.getElementById('$field_id').value='$fid';";	
	watchdog('nanogong', "CALLJS $js"); 
}

/**
 * Implementation of hook_theme().
 */
function nanogong_theme() {
  return array(
    'nanogong_listenUp' => array(
      'arguments' => array('element' => NULL),),
	
    'nanogong_formatter_listenup_player' => 
		array('arguments' => array('element' => NULL)),
    'nanogong_formatter_link_to_file' => 
		array('arguments' => array('element' => NULL)),	
  );
}



/*
 * listenUp recorder applet
 */
function nanogong_recorder_applet_markup($element,$widget){
  $field_id = $element['#id']."-value";
  $url = url('nanogong/file_upload',array('query'=>array('field_id'=>$field_id)));
  $width = isset($widget['player_width'])?$widget['recorder_width']:300;
  $height = isset($widget['player_height'])? $widget['recorder_height']:100;
  $params = $widget['recorder_params'];
  $params_str = nanogong_build_params($params);
	
  $sampleURL = "";
  if(!empty($element['#value']['value'])){
    $file = $element['#value']['file'];            
    $surl = file_create_url($file->filename);
    $sampleURL = "<param name='sampleURL' value='".$surl."'>";
  }
  $submitVoice =
    'function submitVoice() {
      var applet = document.getElementById("nanogong");'. 
      'var ret = applet.sendGongRequest("PostToForm", "http://localhost/recorder/?q=nanogong/file_upload", "userfile", "", "temp");'. 
      'if (ret == null || ret == "") alert("Failed to submit the voice recording!");'. 
      'else alert("Voice recording has been submitted!"); } ';
  drupal_add_js($submitVoice, 'inline');	
	
	$output = 	/*'<applet '.
				    ' code="com.softsynth.javasonics.recplay.RecorderUploadApplet"'.
				    ' codebase="'.base_path().drupal_get_path('module','nanogong').'/codebase"'.
				    ' archive="JavaSonicsListenUp.jar,OggXiphSpeexJS.jar"'.
				    ' name="ListenUpRecorder"'.
					' mayscript="true"'.
				    ' width="'.$width.'"'.
				    ' height="'.$height.'">'.
				    $sampleURL.
					' <param name="uploadURL" value="'.$url.'">'.
				    ' <param name="uploadFileName" value="whatever.wav">'.$params_str.
				' </applet>'.*/

			'<applet '.
					    ' id = "nanogong"'.
					    ' code="gong.NanoGong"'.
					    ' archive="'.base_path().drupal_get_path('module', 'nanogong').'/nanogongBase/nanogong.jar"'.
					    ' name=ListenUpRecorder"'.
					    ' width="180"'.
					    ' height="40">'.
					' </applet>'.
					'<form>'.  
						'<input type="button" value="Submit!" onclick="submitVoice()" />'.
					'</form>';
					//$sampleURL.
						//' <param name="uploadURL" value="'.$url.'">'.
						//'<param name="uploadFileName" value="whatever.wav">'.$params_str.
					
	
	return $output;
}

/**
 * FAPI theme for an individual elements.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
*/ 
function theme_nanogong_listenUp($element) {
	return $element['#children'];
}

/*
 * retrives a file object from the db.
 */
function nanogong_get_file_object($fid){
	$sql = "SELECT * FROM {files} f WHERE f.fid='".$fid."'";
	$res = db_query($sql);
	return db_fetch_object($res);
}

/*
 * parse a "name|value" string to a string of applet parameters tags
 */
function nanogong_build_params($params){
	$params_arr = array();
	$params_str = "";
	if(preg_match_all('/[\w\d_]+\|[\w\d_]+/',$params,$params_arr)){

		foreach($params_arr[0] as $val){
			$pair = explode('|',$val);
			if(count($pair) ==2)
				$params_str.= '<param name="'.$pair[0].'" value="'.$pair[1].'">';
		}
	}
	
	return $params_str;
}
